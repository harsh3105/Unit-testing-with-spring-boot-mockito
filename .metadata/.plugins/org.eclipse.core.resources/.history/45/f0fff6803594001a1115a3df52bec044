package com.unittesting.learn.business;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.atMost;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class ListMockTest {
	
	List<String> mock = mock(List.class);
	
	@Test
	public void size_basic() {
		when(mock.size()).thenReturn(5);
		assertEquals(5,mock.size());
	}
	
	@Test
	public void returnDifferentValues() {
		when(mock.size()).thenReturn(5).thenReturn(10);
		assertEquals(5,mock.size());
		assertEquals(10,mock.size());
	}
	
	@Test
	public void returnWithParameter() {
		when(mock.get(0)).thenReturn("harsh");
		assertEquals("harsh",mock.get(0));
		assertEquals(null,mock.get(1));
	}
	
	@Test
	public void returnWithGenreicParameter() {
		when(mock.get(anyInt())).thenReturn("harsh");
		assertEquals("harsh",mock.get(0));
		assertEquals("harsh",mock.get(1));
	}
	
	@Test
	public void verificationBasics() {
		String value = mock.get(0);
		String value1 = mock.get(1);
		verify(mock).get(0);
		verify(mock,times(2)).get(anyInt());
		verify(mock,atLeast(1)).get(anyInt());
		verify(mock,atLeastOnce()).get(anyInt());
		verify(mock,atMost(2)).get(anyInt());
		verify(mock,never()).get(2);
	}
	
	@Test
	public void argumentCapturing() {
		
		mock.add("SomeString");
		
		ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
		verify(mock).add(captor.capture());
		
		assertEquals("SomeString",captor.getValue());
	}
	
	@Test
	public void multipleArgumentCapturing() {
		
		mock.add("SomeString1");
		mock.add("SomeString2");
		
		ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
		verify(mock, times(2)).add(captor.capture());
		
		List<String> allValues = captor.getAllValues();
		assertEquals("SomeString1",allValues.get(0));
		assertEquals("SomeString2",allValues.get(1));
	}
	
	@Test
	public void spying() {
		ArrayList arrayListMock = mock(ArrayList.class);
		System.out.println(arrayListMock.get(0)); //null
		System.out.println(arrayListMock.size()); //0
		arrayListMock.add("test1"); 
		arrayListMock.add("test2");
		System.out.println(arrayListMock.size()); //0
		when(arrayListMock.size()).thenReturn(5);
	}
	

}
